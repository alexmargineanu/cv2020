{"version":3,"sources":["App/ICal/index.jsx","App/Table/index.jsx","App/Map/utils.jsx","App/Map/RenderPipeline.jsx","App/Map/D3Map.jsx","App/Map/DataPipeline.jsx","App/Map/index.jsx","App/index.jsx","serviceWorker.js","index.js"],"names":["iCalParser","data","calendarEntries","ICAL","length","map","event","e","i","prop","flattenEvent","console","error","name","message","Table","state","totalTime","totalDistance","prevProps","prevState","this","props","flight","setState","parseFloat","duration","toFixed","distance","from","className","icon","faCalendarAlt","format","dtstart","faPlaneDeparture","faClock","dtend","style","textAlign","to","faPlaneArrival","React","Component","cssClass","c","replace","split","join","projection","d3","translate","window","innerWidth","innerHeight","scale","path","RenderPipeline","args","cities","flights","updateFlight","getCurrentFlight","flightTime","svg","circles","selectAll","enter","append","attr","d","longitude","latitude","exit","remove","forEach","flightCoords","type","coordinates","uid","each","index","setTimeout","animateFlightPath","arrow","fromCity","toCity","fromCityLabel","toCityLabel","flightPath","dashedPath","node","totalLength","getTotalLength","pointAtLength","l","xy","getPointAtLength","x","y","t","delay","on","transition","attrTween","pos","a","Math","max","b","atan2","PI","angleAtLength","text","checkLabelOverlapping","thisBBox","getBBox","filter","k","j","underBBox","r","left","right","width","top","bottom","height","getOverlapFromTwoExtents","D3Map","world","worldMap","datum","countries","topojson","objects","features","insert","zoom","scaleExtent","select","transform","call","citiesPipeline","moment","diff","withAirportCode","location","pop","summary","trim","city","find","occurence","reduce","findIndex","fromCoords","toCoords","sort","Map","mapRef","createRef","fetch","then","response","json","catch","current","Promise","all","geoDb","DataPipeline","addCityNames","filterCities","valCities","addGeoData","valFlights","f","renderLabels","renderFlightPath","renderCircles","err","log","ref","App","url","status","txt","parsedEvents","flightEvents","indexOf","addFlightDuration","CSSTransition","timeout","classNames","in","appear","updateCurrentFlight","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.994d674d.chunk.js","sourcesContent":["import * as ICAL from 'ical.js';\n\nconst iCalParser = (data) => {\n\n    const dumpCalendar = (parsedEvents) => {\n        const comp = new ICAL.Component(['vcalendar', [], []]);\n\n        const flightEvents = parsedEvents.filter(d => {\n            if(d.summary){\n                return d.summary.indexOf('Flight to') > -1;\n            }\n            return false;\n        });\n        flightEvents.map(f => {\n            const vevent = new ICAL.Component('vevent');\n            var event = new ICAL.Event(vevent);\n            event.summary = f.summary;\n            event.location = f.location;\n            event.uid = f.uid;\n\n            vevent.addPropertyWithValue('dtstart', f.dtstart);\n            vevent.addPropertyWithValue('dtend', f.dtend);\n            vevent.addPropertyWithValue('dtstamp', f.dtstamp);\n            vevent.addPropertyWithValue('created', f.created);\n\n            comp.addSubcomponent(vevent);\n        });\n\n        console.log(comp.toString());\n\n\n    }\n\n    const flattenEvent = (e) => {\n        let event = {};\n        for(let i = 0; i < e[1].length; i++) {\n            let prop = e[1][i];\n            event[prop[0]] = prop[3];\n        }\n        return event;\n    };\n\n    try {\n        const calendarEntries = ICAL.parse(data);\n        if(calendarEntries.length && calendarEntries[2]){\n            const events = calendarEntries[2];\n            const e = events.map(event => flattenEvent(event));\n            //dumpCalendar(e);\n            return e;\n        } else {\n            console.error('no parsed events');\n            return [];\n        }\n    }\n    catch(error) {\n        console.error(error.name, error.message);\n    }\n\n};\n\nexport default iCalParser;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Moment from 'react-moment';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faPlaneDeparture,\n    faPlaneArrival,\n    faCalendarAlt,\n    faClock,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport './index.scss';\n\nclass Table extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            totalTime: 0,\n            totalDistance: 0,\n        };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.flight && prevProps.flight !== this.props.flight) {\n            this.setState({\n                totalTime: (parseFloat(prevState.totalTime) + parseFloat(this.props.flight.duration)).toFixed(1),\n                totalDistance: (parseFloat(prevState.totalDistance) + parseFloat(this.props.flight.distance)).toFixed(0),\n            });\n        }\n    }\n\n    render() {\n        const {\n            flight,\n        } = this.props;\n\n        const {\n            totalTime,\n            totalDistance,\n        } = this.state;\n\n        if(!flight.from) {\n            return (\n                <section className=\"Table\">\n                    <h1>\n                        <small className=\"separator\">loading flights</small>\n                    </h1>\n                </section>\n            );\n        }\n\n        return (\n            <section className=\"Table\">\n                <h1>\n                    <FontAwesomeIcon icon={faCalendarAlt} /> <Moment format='DD MMM YYYY'>{flight.dtstart}</Moment>\n                </h1>\n                <ul>\n                    <li>\n                        <h2>\n                            <FontAwesomeIcon icon={faPlaneDeparture} /> {flight.from}\n                        </h2>\n                    </li>\n                    <li className=\"separator\">\n                        <Moment format='hh:mma'>{flight.dtstart}</Moment>\n                        <small>\n                            <FontAwesomeIcon icon={faClock} /> {flight.duration} h\n                        </small>\n                        <Moment format='hh:mma'>{flight.dtend}</Moment>\n                    </li>\n                    <li>\n                        <h2 style={{textAlign: 'right'}}>\n                            {flight.to} <FontAwesomeIcon icon={faPlaneArrival} />\n                        </h2>\n                    </li>\n                </ul>\n                <small className=\"info\">\n                    Total flight time: <strong>{totalTime} h</strong>, distance: <strong>{totalDistance} km</strong> (aprox)\n                </small>\n            </section>\n        );\n    }\n}\n\nTable.propTypes = {\n    flight: PropTypes.object,\n};\n\nexport default Table;\n","const getOverlapFromTwoExtents = (l, r) => {\n    var overlapPadding = 0;\n    l.left = l.x - overlapPadding;\n    l.right = l.x + l.width + overlapPadding;\n    l.top = l.y - overlapPadding;\n    l.bottom = l.y + l.height + overlapPadding;\n    r.left = r.x - overlapPadding;\n    r.right = r.x + r.width + overlapPadding;\n    r.top = r.y - overlapPadding;\n    r.bottom = r.y + r.height + overlapPadding;\n    var a = l;\n    var b = r;\n\n    if (a.left >= b.right || a.top >= b.bottom ||\n    a.right <= b.left || a.bottom <= b.top ){\n        return false;\n    } else {\n        return true;\n    }\n};\n\nconst cssClass = (c) => c\n    .replace('@', '')\n    .replace('.', '')\n    .replace('#', '')\n    .split(' ')\n    .join('');\n\nexport { getOverlapFromTwoExtents, cssClass };\n","import * as d3 from 'd3';\n\nimport {\n    getOverlapFromTwoExtents,\n    cssClass\n} from './utils';\n\nconst projection = d3.geoMercator().translate(\n    [window.innerWidth / 2, window.innerHeight / 2]\n).scale(\n    190\n);\n\nconst path = d3.geoPath().projection(projection);\n\nexport { path, projection };\n\nclass RenderPipeline  {\n\n    constructor(args) {\n        this.cities = args.cities;\n        this.flights = args.flights;\n        this.updateFlight = args.getCurrentFlight;\n        this.flightTime = args.flightTime || 2500;\n        this.svg = args.svg;\n    }\n\n    renderCircles() {\n        const circles = this.svg.selectAll('circle').data(this.cities);\n        circles.enter().append('svg:circle')\n            .attr('cx', d => projection([d.longitude,d.latitude])[0])\n            .attr('cy', d => projection([d.longitude,d.latitude])[1])\n            .attr('r',  4.5)\n            .attr('class', d => `city${cssClass(d.name)}`);\n        circles.exit().remove();\n\n        return this;\n    }\n\n    renderFlightPath() {\n        this.flights.forEach(flight => {\n            if(flight.flightCoords && flight.flightCoords.length === 2) {\n                this.svg.append('path')\n                    .attr('d', path({\n                        type: 'LineString',\n                        coordinates: [\n                            flight.flightCoords[0],\n                            flight.flightCoords[1]\n                        ]\n                    }))\n                    .attr('class', `flight-path flight-path${cssClass(flight.uid)}`);\n\n\n                    this.svg.append('path')\n                        .attr('d', path({\n                            type: 'LineString',\n                            coordinates: [\n                                flight.flightCoords[0],\n                                flight.flightCoords[1]\n                            ]\n                        }))\n                        .attr('class', `dashed dashed${cssClass(flight.uid)}`);\n            } else {\n                console.error('no flightCoords for', flight);\n            }\n        });\n\n        this.svg.append('path')\n            .attr('d', 'M-5,0 L-5,5 L5,0 L-5,-5 Z')\n            .attr('class', 'arrow');\n\n        this.svg.selectAll('.flight-path').data(this.flights).each(\n            (flight, index) => {\n                if(flight.to && flight.from) {\n                    setTimeout(\n                        () => {\n                            this.updateFlight(flight);\n                            this.animateFlightPath(flight);\n                        }, this.flightTime * index\n                    )\n                }\n            }\n        );\n        return this;\n    }\n\n    animateFlightPath(d) {\n        const arrow           = d3.select('.arrow');\n        const fromCity        = d3.select(`.city${cssClass(d.from)}`);\n        const toCity          = d3.select(`.city${cssClass(d.to)}`);\n        const fromCityLabel   = d3.select(`.label${cssClass(d.from)}`);\n        const toCityLabel     = d3.select(`.label${cssClass(d.to)}`);\n        const flightPath      = d3.select(`.flight-path${cssClass(d.uid)}`);\n        const dashedPath      = d3.select(`.dashed${cssClass(d.uid)}`);\n\n        const path = flightPath.node();\n        const totalLength = path ? path.getTotalLength() : null;\n\n        const pointAtLength = (l) => {\n            const xy = path.getPointAtLength(l);\n            return [xy.x, xy.y];\n        };\n\n        // Approximate tangent\n        const angleAtLength = (l) => {\n            const a = pointAtLength(Math.max(l - 0.01,0)); // this could be slightly negative\n            const b = pointAtLength(l + 0.01); // browsers cap at total length\n            return Math.atan2(b[1] - a[1], b[0] - a[0]) * 180 / Math.PI;\n        };\n\n        const t = d3.transition()\n            .duration(this.flightTime - 300)\n            .delay(0)\n            .on('start',function(){\n                const setVisible = [\n                    arrow,\n                    flightPath,\n                    fromCity,\n                    fromCityLabel,\n                    dashedPath,\n                ];\n                setVisible.forEach(path => path.style('display', 'block'));\n                toCity.attr('r', parseFloat(toCity.attr('r'))+0.25);\n            })\n            .on('end',function(){\n                dashedPath.style('display', 'none');\n                arrow.style('display', 'none');\n                toCity.style('display', 'block')\n                toCityLabel.style('display', 'block')\n            });\n\n        if(totalLength){\n            arrow.transition(t)\n                .attrTween('transform',function(){\n                    return function(t){\n                        const pos = t * totalLength;\n                        return 'translate(' + pointAtLength(pos) + ') rotate( ' + angleAtLength(pos) + ')';\n                    };\n                });\n\n            flightPath.transition(t)\n                .attrTween('stroke-dasharray',function(){\n                    return d3.interpolateString('0,' + totalLength,totalLength + ',' + totalLength);\n                });\n        }\n    }\n\n    renderLabels() {\n        this.svg.append('g').selectAll('g')\n            .data(this.cities)\n            .enter().append('g')\n            .append('text')\n            .attr('x', d => projection([d.longitude,d.latitude])[0] + 8)\n            .attr('y', d => projection([d.longitude,d.latitude])[1] + 3)\n            .attr('class', d => `label${cssClass(d.name)}`)\n            .text(d => d.name);\n\n        this.checkLabelOverlapping(this.svg.selectAll('text'));\n\n        return this;\n    }\n\n    checkLabelOverlapping(data){\n        data.each(function(d, i) {\n            const thisBBox = this.getBBox();\n            data.filter((k, j) => j > i).each(function(){\n                const underBBox = this.getBBox();\n                if(getOverlapFromTwoExtents(thisBBox, underBBox)){\n                    d3.select(this).style('opacity', 0.5);\n                }\n            });\n        });\n\n        return this;\n    }\n\n}\n\nexport default RenderPipeline;\n","import * as d3 from 'd3';\nimport * as topojson from 'topojson';\nimport { path } from './RenderPipeline';\n\nclass D3Map {\n\n    constructor(args) {\n        this.world = args.world;\n        this.svg = args.svg;\n\n        this.worldMap();\n    }\n\n    worldMap(){\n        this.svg.append('path')\n            .attr('d', path)\n            .datum(d3.geoGraticule())\n            .attr('class', 'grid');\n\n        const countries = topojson.feature(this.world, this.world.objects.countries).features;\n        this.svg.selectAll('.country')\n            .data(countries)\n            .enter().insert('path', '.grid')\n            .attr('class', 'country')\n            .attr('d', path)\n            .style('fill', '#fff');\n\n\n        const zoomed = () => {\n            this.svg.select('.arrow').attr('transform', d3.event.transform);\n            this.svg.selectAll('path').attr('transform', d3.event.transform);\n            this.svg.selectAll('circle').attr('transform', d3.event.transform);\n            this.svg.selectAll('text').attr('transform', d3.event.transform);\n        };\n\n        const zoom = d3.zoom().scaleExtent([1, 3]).on('zoom', zoomed);\n\n        this.svg.call(zoom);\n    }\n}\n\nexport default D3Map;\n","import moment from 'moment';\n\nclass citiesPipeline {\n    constructor(args) {\n        this.cities = args.cities;\n        this.flights = args.flights;\n    }\n\n    get valCities() {\n        return this.cities;\n    }\n\n    get valFlights() {\n        this.flights.sort(function(a, b) {\n          if (a.dtstart < b.dtstart) {\n            return -1;\n          }\n          if (a.dtstart > b.dtstart) {\n            return 1;\n          }\n          return 0;\n        });\n        return this.flights;\n    }\n\n    addFlightDuration() {\n        this.flights = this.flights.map(e => {\n            const duration = parseFloat(moment(e.dtend).diff(moment(e.dtstart), 'hours', true)).toFixed(1);\n            const distance = duration * 750/*km/h*/;\n            return {\n                ...e,\n                duration,\n                distance,\n            };\n        });\n\n        return this;\n    }\n\n\n    addCityNames() {\n        this.flights = this.flights.map(e => {\n\n            // get London from \"London LHR\"\n            const withAirportCode = e.location.split(' ');\n            withAirportCode.pop();\n            let from = withAirportCode.join(' ');\n\n            // get BCN from \"Flight to BCN (FR 3064)\"\n            let to = e.summary.replace('Flight to ', '').replace(/\\([^()]*\\)/g, '').trim();\n\n            return {\n                ...e,\n                from,\n                to,\n            };\n        });\n\n        return this;\n    }\n\n    filterCities(){\n        this.cities = this.cities.filter(city => this.flights.find(\n            flight => flight.to === city.name || flight.from === city.name\n        ));\n\n        return this;\n    }\n\n    countCityOccurrence() {\n        this.cities = this.cities.map(\n            city => {\n                const occurence = this.flights.reduce(\n                    (occurence, flight) => {\n                        if(flight.to === city.name || flight.from === city.name){\n                            occurence++;\n                        }\n                        return occurence;\n                    }, 0\n                );\n                return { ... city, occurence };\n            }\n        );\n\n        return this;\n    }\n\n    addGeoData() {\n        this.flights = this.flights.map(flight => {\n            const to = this.cities.findIndex(city => city.name === flight.to);\n            const from = this.cities.findIndex(city => city.name === flight.from);\n            const fromCoords = {\n                fromCoords: from === -1 ? [] : [this.cities[from].longitude, this.cities[from].latitude]\n            };\n            const toCoords = {\n                toCoords: to === -1 ? [] : [this.cities[to].longitude, this.cities[to].latitude]\n            };\n            const flightCoords = {\n                flightCoords: to > -1 && from > -1 ? [\n                    [this.cities[from].longitude, this.cities[from].latitude],\n                    [this.cities[to].longitude, this.cities[to].latitude]\n                ] : []\n            };\n            const obj = {\n                ...flight,\n                ...flightCoords,\n                ...fromCoords,\n                ...toCoords,\n            };\n            return obj;\n        });\n\n        return this;\n    }\n}\n\nexport default citiesPipeline;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as d3 from 'd3';\n\nimport D3Map from './D3Map';\nimport DataPipeline from './DataPipeline';\nimport RenderPipeline from './RenderPipeline';\n\nimport './index.scss';\n\nclass Map extends React.Component {\n\n    constructor(){\n        super();\n        this.mapRef = React.createRef();\n        this.state = {\n            world: [],\n        };\n    }\n\n    componentDidMount() {\n        const url = 'https://alexmargineanu.github.io/cv2020/world-50m.json';\n        fetch(url)\n            .then(response => response.json()\n                .then(world => this.setState({ world }))\n            )\n            .catch(error => console.error(error));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { world } = this.state;\n        const svg = d3.select(this.mapRef.current);\n\n        if(prevState.world !== world && world !== null){\n            Promise.all([\n                d3.csv('https://alexmargineanu.github.io/cv2020/geonames_cities100000.csv'),\n            ]).then(([geoDb]) => {\n\n                const data = new DataPipeline({\n                    cities: geoDb,\n                    flights: this.props.flights\n                }).addCityNames();\n\n                new D3Map({ svg, world });\n\n                setTimeout(()=>{\n                    new RenderPipeline({\n                        svg: svg,\n                        cities: data.filterCities().valCities,\n                        flights: data.addGeoData().valFlights,\n                        getCurrentFlight: (f) => this.props.getCurrentFlight(f),\n                        flightTime: 2300,\n                    }).renderLabels().renderFlightPath().renderCircles();\n                }, 2000);\n            }).catch(err => console.log('Error loading or parsing data.', err));\n        }\n    }\n\n    render(){\n        const { world } = this.state;\n\n        if (!world) {\n            return <small>Error</small>;\n        }\n\n        if (world.length && world.length === 0) {\n            return <small>Loading</small>;\n        }\n\n        return (\n            <section className=\"map\">\n                <svg ref={this.mapRef} />\n            </section>\n        );\n    }\n}\n\nMap.propTypes = {\n    flights: PropTypes.array,\n    getCurrentFlight: PropTypes.func,\n};\n\nexport default Map;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport iCalParser from './ICal';\nimport Table from './Table';\nimport Map from './Map';\nimport DataPipeline from './Map/DataPipeline';\n\nimport './index.scss';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            flights: [],\n            flight: {},\n        };\n    }\n\n    updateCurrentFlight(flight){\n        this.setState({ flight });\n    }\n\n    componentDidMount(){\n        const url = 'https://alexmargineanu.github.io/cv2020/data.ics';\n        fetch(url)\n            .then(response => {\n                if(response.status === 200) {\n                    response.text()\n                        .then(txt => {\n                            const parsedEvents = iCalParser(txt);\n                            if(parsedEvents){\n                                const flightEvents = parsedEvents.filter(d => {\n                                    if(d.summary){\n                                        return d.summary.indexOf('Flight to') > -1;\n                                    }\n                                    return false;\n                                });\n                                const flights = new DataPipeline({\n                                    flights: flightEvents\n                                }).addCityNames().addFlightDuration().valFlights;\n\n                                this.setState({ flights });\n                            }\n                        });\n                } else {\n                    console.error('status ' + response.status, 'url:', url);\n                }\n            })\n            .catch(error => console.error(error));\n    }\n\n\n    render() {\n        const { flights, flight } = this.state;\n        return (\n            <CSSTransition\n                timeout={0}\n                classNames=\"water\"\n                in={true}\n                appear={true}\n            >\n                <div className=\"water\">\n                    <Map\n                        flights={flights}\n                        getCurrentFlight={f=>this.updateCurrentFlight(f)}\n                    />\n                    <Table\n                        flight={flight}\n                    />\n                </div>\n            </CSSTransition>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}